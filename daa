Graph->dfs,bfs,adjacency list
#include<stdio.h>
#include<stdlib.h>
int no_vertices;
struct node
{	
int data;
	struct node *next;
};
void readgraph(struct node *ad[]);
void printgraph(struct node *ad[]);
void bfs(struct node *ad[],int start,int visited[]);
void dfs(struct node *ad[],int start,int visited[]);
int main()
{
	int i,j,k,ch,start;
	printf("Enter the total number of vertex :");
	scanf("%d",&no_vertices);
	int visited[no_vertices];
	struct node *adj[no_vertices];
	for(i=0;i<no_vertices;i++)
	{
		adj[i] = NULL;
	}
	readgraph(adj);

	do{
		printf("\n Enter 1 for BFS\n Enter 2 for DFS\n Enter 3 to Print the adjacency list\nEnter 4 to Exit : ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1: 
				printf("Enter the vertex from which do you wanted to start :");
				scanf("%d",&start);
				for(int k=0;k<no_vertices;k++)
					visited[k]=0;
				bfs(adj,start,visited); break;
			
			case 2: 
				printf("Enter the vertex from which do you wanted to start :");
				scanf("%d",&start);
				for(int k=0;k<no_vertices;k++)
					visited[k]=0;

				printf("DFS : ");
				dfs(adj,start,visited); 
				break;

			case 3: printgraph(adj);break;

			case 4: break;
		}
	}while(ch!= 4);

	return 0;
}
void readgraph(struct node *ad[])
{
	struct node *newnode;
	int i,j,k,data;

	for(i=0;i<no_vertices;i++)
	{
		struct node *last =NULL;
		printf("\nEnter the Number of neighbours of %d  :",i);
		scanf("%d",&k);

		for(j=0;j<k;j++)
		{
			printf("Enter the value of %d neighbour of %d : ",j,i);
			scanf("%d",&data);

			newnode = (struct node*)malloc(sizeof(struct node*));
			newnode->data = data;
			newnode->next = NULL;
			if(ad[i]==NULL)
			{
				ad[i] = newnode;
			}
			else
				last->next = newnode;

			last = newnode;
		}
	}
}
void printgraph(struct node *ad[])
{
	struct node *ptr  = NULL;
	int i,j;
	for(i=0;i<no_vertices;i++)
	{
		ptr = ad[i];
		printf("\n The neighbour of %d are :",i);
		while(ptr != NULL)
		{
			printf("%d\t",ptr->data);
			ptr = ptr->next;
		}
	}
}
void bfs(struct node *ad[],int start,int visited[])
{
	int queue[no_vertices],front=-1,rear=-1;

	
	printf("BFS : ");
	queue[++rear] = start;
	visited[start]=1;
	front++;
	while(front<=rear)
	{
		printf("%d\t",queue[front]);
		struct node *ptr;
		ptr =  ad[queue[front++]];
		while(ptr != NULL)
		{
			if(visited[ptr->data]!=1)
			{
				queue[++rear] = ptr->data;
				visited[ptr->data] =1;
			}
			ptr = ptr->next;
		}

	}

}


void dfs(struct node *ad[],int start, int visited[])
{

	visited[start] = 1;
	printf("%d\t",start);
	struct node *ptr;
	ptr = ad[start];
	while(ptr!=NULL)
	{
		if(visited[ptr->data]==0)
			dfs(ad,ptr->data,visited);
		ptr = ptr->next;
	}
}


OUTPUT
Enter the total numbe of vertex :5
Enter the Number of neighbours of 0  :3
Enter the value of 0 neighbour of 0 : 1
Enter the value of 1 neighbour of 0 : 2
Enter the value of 2 neighbour of 0 : 4
Enter the Number of neighbours of 1  :2
Enter the value of 0 neighbour of 1 : 0
Enter the value of 1 neighbour of 1 : 2
Enter the Number of neighbours of 2  :3
Enter the value of 0 neighbour of 2 : 0
Enter the value of 1 neighbour of 2 : 1
Enter the value of 2 neighbour of 2 : 3
Enter the Number of neighbours of 3  :1
Enter the value of 0 neighbour of 3 : 2
Enter the Number of neighbours of 4  :1
Enter the value of 0 neighbour of 4 : 0
Enter 1 for BFS
 Enter 2 for DFS
 Enter 3 to Print the adjacency list
Enter 4 to Exit : 3
The neighbour of 0 are :1	2	4	
 The neighbour of 1 are :0	2	
 The neighbour of 2 are :0	1	3	
 The neighbour of 3 are :2	
 The neighbour of 4 are :0	
 Enter 1 for BFS
 Enter 2 for DFS
 Enter 3 to Print the adjacency list
Enter 4 to Exit : 1
Enter the vertex from which do you wanted to start :0
BFS : 0	1	2	4	3	
 Enter 1 for BFS
 Enter 2 for DFS
 Enter 3 to Print the adjacency list
Enter 4 to Exit : 2
Enter the vertex from which do you wanted to start :2
DFS : 2	0	1	4	3	













GCD->CONSECUTIVE NUMBER
#include<stdio.h>
#include<stdlib.h>
int gcd(num1,num2);
void main()
{
    int num1,num2;
    printf("enter the two numbers to find the gcd of it\n");
    scanf("%d",&num1);
    scanf("%d",&num2);
    int ans=0;
    ans=gcd(num1,num2);
    printf("the GCD of the number is %d",ans);
}
int gcd(int n1,int n2)
{
    int min;
    if(n1<n2)
        min=n1;
    else
        min=n2;
    while(min!=0)
    {
        if(n2%min==0)
            {
                if(n1%min==0)
                return min;
            }
        else
            min=min-1;
    }
}
















FIBONACCI->recursively
#include<stdlib.h>
#include<stdlib.h>
int fib(int num);
void main()
{
int num,i;
   printf("enter the size of the sequence\n ");
   scanf("%d",&num);
   printf("the series is ");

   for(i=0;i<num;i++){
   printf("  %d",fib(i));
   }
}
int fib(int n)
{
    if(n==0)
        return 0;
    if(n==1)
        return 1;
    else
        return fib(n-1)+fib(n-2);
}






















ADJACENCY MATRIX OF GRAPH
#include<stdio.h>
int no_vertices;
void printgraph(int adj[][no_vertices])
{
    for(int i=0;i<no_vertices;i++)
    {
        for (int j=0;j<no_vertices;j++)
        {
            printf("%d ",adj[i][j]);
        }
        printf("\n");
    }
}
int main()
{
    int s,d;
    printf("enter the number of vertices :");
    scanf("%d",&no_vertices);
    int adj[no_vertices][no_vertices];
    for(int i=0;i<no_vertices;i++)
        for (int j=0;j<no_vertices;j++)
            adj[i][j]=0;
    while(s!=-1 &&d!=-1)
    {
        printf("\n enter an edge from node (0 to %d) to node (0 to %d) :",no_vertices,no_vertices);
        scanf("%d%d",&s,&d);
        adj[s][d]=1;
        adj[d][s]=1;
    }
    printgraph(adj);
    return 0;
}



OUTPUT
enter the number of vertices :5
enter an edge from node (0 to 5) to node (0 to 5) :0 1
enter an edge from node (0 to 5) to node (0 to 5) :1 2 
enter an edge from node (0 to 5) to node (0 to 5) :2 3
enter an edge from node (0 to 5) to node (0 to 5) :1 2
enter an edge from node (0 to 5) to node (0 to 5) :2 3
enter an edge from node (0 to 5) to node (0 to 5) :-1 -1
0 1 0 0 0 
1 0 1 0 0 
0 1 0 1 0 
0 0 1 0 0 
0 0 0 0 0








EUCLID ALGORITHM
#include <stdio.h> 

unsigned int EuclidGCD(unsigned int m, unsigned int n) {
    unsigned int r;
    int opcount = 0; 
    while (n != 0) {
        opcount++; // Increment operation count
        r = m % n;
        m = n;
        n = r;
    }
    
    printf("Operation count= %d\n", opcount);
    
    return m; // Return the GCD
}

int main() {
    unsigned int m, n;
    
    printf("Enter the two numbers whose GCD has to be calculated: ");
    scanf("%d", &m);
    scanf("%d", &n);
    
    printf("GCD of two numbers using Euclid's method is %d", EuclidGCD(m, n));

    
    return 0;
}



















TOWER OF HANOI
#include <stdio.h>
#include <math.h>
#include <time.h>

int basicOpCount = 0; 
void towerOfHanoi(int n, char source, char destination, char auxiliary) {
    if (n == 1) {
        basicOpCount++; 
        printf("Move disk 1 from %c to %c\n", source, destination);
        return;
    }
    towerOfHanoi(n - 1, source, auxiliary, destination);
    basicOpCount++; 
    printf("Move disk %d from %c to %c\n", n, source, destination);
    towerOfHanoi(n - 1, auxiliary, destination, source);
}

int main() {
    int n;
    printf("Enter the number of disks: ");
    scanf("%d", &n);

    clock_t start = clock();

    printf("Steps to solve Tower of Hanoi with %d disks:\n", n);
    towerOfHanoi(n, 'A', 'C', 'B');

    clock_t end = clock();

    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Number of basic operations: %d\n", basicOpCount);
    printf("Time taken: %f seconds\n", time_taken);
    return 0;
}













Write a program to find GCD using middle school method and analyze its time efficiency.

#include <stdio.h>
#include <math.h>
#include <stdbool.h>
#include <time.h>

// Function to check if a number is prime
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

// Function to find prime factors of a number
void primeFactors(int n, int *factors, int *count) {
    int index = 0;
    while (n % 2 == 0) {
        factors[index++] = 2;
        (*count)++;
        n /= 2;
    }
    for (int i = 3; i <= sqrt(n); i += 2) {
        while (n % i == 0) {
            factors[index++] = i;
            (*count)++;
            n /= i;
        }
    }
    if (n > 2) {
        factors[index++] = n;
        (*count)++;
    }
}

// Function to find the GCD using prime factors
unsigned int GCDByPrimeFactors(int m, int n, int *opcount) {
    int factorsM[100], factorsN[100], countM = 0, countN = 0;
    primeFactors(m, factorsM, &countM);
    primeFactors(n, factorsN, &countN);

    int gcd = 1;
    int i = 0, j = 0;
    while (i < countM && j < countN) {
        (*opcount)++; // Increment operation count
        if (factorsM[i] == factorsN[j]) {
            gcd *= factorsM[i];
            i++;
            j++;
        } else if (factorsM[i] < factorsN[j]) {
            i++;
        } else {
            j++;
        }
    }
    return gcd;
}

int main() {
    int m, n;

    // Input the two numbers
    printf("Enter the two numbers whose GCD has to be calculated: ");
    scanf("%d %d", &m, &n);

    // Measure start time
    clock_t start = clock();

    // Initialize operation count
    int opcount = 0;

    // Calculate and print the GCD using the prime factors method
    printf("GCD of %d and %d using prime factors method: %d\n", m, n, GCDByPrimeFactors(m, n, &opcount));

    // Measure end time
    clock_t end = clock();

    // Calculate the time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Operation count: %d\n", opcount); // Print operation count
    printf("Time taken: %f seconds\n", time_taken);

    return 0;
}








































Write a program to delete strong numbers from an array using recursion [A strong number is such that the sum of it's factorial is the number itself]

#include <stdio.h>
#include <stdbool.h>
#include <time.h>

// Function to calculate factorial recursively
int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    return n * factorial(n - 1);
}

// Function to check if a number is strong
bool isStrong(int num) {
    int temp = num;
    int sum = 0;
    while (temp != 0) {
        sum += factorial(temp % 10);
        temp /= 10;
    }
    return sum == num;
}

// Function to delete strong numbers from an array recursively
void deleteStrong(int arr[], int *size, int index, int *opcount) {
    if (index == *size)
        return;

    if (isStrong(arr[index])) {
        for (int i = index; i < (*size) - 1; i++) {
            arr[i] = arr[i + 1];
            (*opcount)++; // Increment operation count
        }
        (*size)--; // Decrement size of the array
        deleteStrong(arr, size, index, opcount); // Check the same index again since the element at that index has changed
    } else {
        deleteStrong(arr, size, index + 1, opcount); // Move to the next index
        (*opcount)++; // Increment operation count
    }
}

int main() {
    int size;

    // Input the size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &size);

    int arr[size];

    // Input array elements
    printf("Enter %d numbers:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    // Measure start time
    clock_t start = clock();

    // Initialize operation count
    int opcount = 0;

    // Delete strong numbers recursively
    deleteStrong(arr, &size, 0, &opcount);

    // Measure end time
    clock_t end = clock();

    // Calculate the time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Print the array after deleting strong numbers
    printf("Array after deleting strong numbers: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Print operation count and time taken
    printf("Operation count: %d\n", opcount);
    printf("Time taken: %f seconds\n", time_taken);

    return 0;
}















































Selection sort
#include <stdio.h>
#include <stdlib.h>

void selectionSort(int *a, unsigned int n, int *opcount) {
    unsigned int i, j, min;
    int temp;
    *opcount = 0; // Reset operation count
    for (i = 0; i < n - 1; i++) {
        min = i;
        for (j = i + 1; j < n; j++) {
            (*opcount)++; // Increment opcount for every comparison
            if (a[j] < a[min])
                min = j;
        }
        
        temp = a[i];
        a[i] = a[min];
        a[min] = temp;
    }
}

int main() {
    int *a;
    int i, n;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    a = (int *)malloc(sizeof(int) * n);

    printf("Enter %d elements of the array:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    // Perform selection sort and count comparisons
    int opcount;
    selectionSort(a, n, &opcount);
    
    printf("\nElements after selection sort: ");
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    printf("Operation count: %d\n", opcount); // Print operation count
    free(a);

    return 0;
}














Write a program to sort set of integers using bubble sort. Analyze its time efficiency. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to perform bubble sort and count the number of comparisons
void bubbleSort(int *a, int n, int *opcount) {
    *opcount = 0; // Reset operation count
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            (*opcount)++; // Increment opcount for every comparison
            if (a[j] > a[j + 1]) {
                // Swap if the current element is greater than the next element
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
            }
        }
    }
}

int main() {
    int *a;
    int n;

    // Input the size of the array
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    // Allocate memory for the array
    a = (int *)malloc(sizeof(int) * n);
    if (a == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Input array elements from the user
    printf("Enter %d elements of the array:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    // Measure start time
    clock_t start = clock();

    // Perform bubble sort and count comparisons
    int opcount;
    bubbleSort(a, n, &opcount);

    // Measure end time
    clock_t end = clock();

    // Calculate the time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Print the sorted array
    printf("\nElements after bubble sort: ");
    for (int i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    // Print the operation count
    printf("Operation count: %d\n", opcount);

    // Print the time taken for sorting
    printf("Time taken: %f seconds\n", time_taken);

    // Free dynamically allocated memory
    free(a);

    return 0;
}

























































STRING MATCHING
#include <stdio.h>
#include <string.h>
#include <time.h>

// Function to perform brute-force string matching
int bruteForceStringMatch(char *text, char *pattern, int *opcount) {
    int n = strlen(text);
    int m = strlen(pattern);
    *opcount = 0; // Reset operation count

    for (int i = 0; i <= n - m; i++) {
        int j;
        for (j = 0; j < m; j++) {
            (*opcount)++; // Increment opcount for every comparison
            if (text[i + j] != pattern[j])
                break;
        }
        if (j == m)
            return i; // Pattern found at index i in the text
    }

    return -1; // Pattern not found in the text
}

int main() {
    char text[100], pattern[100];
    int opcount;
    
    // Input the text
    printf("Enter the text: ");
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = '\0'; // Remove newline character

    // Input the pattern
    printf("Enter the pattern: ");
    fgets(pattern, sizeof(pattern), stdin);
    pattern[strcspn(pattern, "\n")] = '\0'; // Remove newline character

    // Measure start time
    clock_t start = clock();

    // Perform brute-force string matching and count comparisons
    int index = bruteForceStringMatch(text, pattern, &opcount);

    // Measure end time
    clock_t end = clock();

    // Calculate the time taken
    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    // Print the result
    if (index != -1)
        printf("Pattern found at index %d in the text.\n", index);
    else
        printf("Pattern not found in the text.\n");

    // Print operation count
    printf("Operation count: %d\n", opcount);

    // Print time taken
    printf("Time taken: %f seconds\n", time_taken);

    return 0;
}



Write a program to implement matrix multiplication using brute-force technique and analyze its time efficiency. 
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to perform matrix multiplication
void matrixMultiplication(int **A, int **B, int **C, int n, int *opcount) {
    *opcount = 0; // Reset operation count
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0; // Initialize each element of the resulting matrix C to 0
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j]; // Perform dot product
                (*opcount)++; // Increment operation count for each multiplication and addition
            }
        }
    }
}

// Function to print a matrix
void printMatrix(int **matrix, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to dynamically allocate memory for a matrix
int** allocateMatrix(int n) {
    int **matrix = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        matrix[i] = (int *)malloc(n * sizeof(int));
    }
    return matrix;
}

// Function to deallocate memory for a matrix
void deallocateMatrix(int **matrix, int n) {
    for (int i = 0; i < n; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

int main() {
    int n;

    // Input the size of the square matrices
    printf("Enter the size of the square matrices: ");
    scanf("%d", &n);

    // Allocate memory for matrices A, B, and C
    int **A = allocateMatrix(n);
    int **B = allocateMatrix(n);
    int **C = allocateMatrix(n);

    // Input elements of matrix A
    printf("Enter elements of matrix A:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]